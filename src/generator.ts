import path from 'path';
import fs from 'fs';
import { Message, Options } from './interfaces';


const TemplateHead = `/* eslint-disable */
// This file is generated by chrome-intl-code-gen, do not edit it
`


export class Generator {
    constructor(
        public options: Options
    ) {}


    public start() {
        const { input, base } = this.options
        const localeToRead = path.resolve(input, base || 'en', 'messages.json')
        fs.readFile(localeToRead, { encoding: 'utf-8' }, (err, data) => {
            if(err) {
                console.error(err);
                return;
            }
            try {
                const json = JSON.parse(data)
                this.parseData(json).then(this.writeToDisk.bind(this))
            } catch (error) {
                console.error(error)
            }
        })
    }

    private parseData(data: Message) {
        const { template } = this.options;

        const TemplateContent = typeof template === 'function' ? template(data) : this.getSingleFormat(data) + '\n' + this.getMultiFormat(data)
        
        return new Promise((resolve: (value: string) => any) => {
            resolve(TemplateHead + '\n' + TemplateContent)
        })
    }

    getSingleFormat(data: Message) {
        const keys = Object.keys(data).map(key => `"${key}"`).join(' | ')

        return `export type ChromeI18nKeys = ${keys}

export default function i18n(key: ChromeI18nKeys): string {
    return chrome.i18n.getMessage(key)
}
        `
    }

    getMultiFormat(data: Message) {
        return Object.keys(data).map(key => {
            let func = `
export function ${key}(): string {
    return chrome.i18n.getMessage('${key}')
}
            `

            let description;
            if (description = data[key].description) {
                func = `/**
* ${description}
*/`
                + func
            }
            return func;
        }).join('\n')
    }

    private writeToDisk(content: string) {
        if (!content.length) return

        if(path.extname(this.options.output) !== '.ts') {
            return console.error('output must be a typescript file')
        }

        fs.writeFile(this.options.output, content, (err) => {
            if (err) {
                console.error(err)
            }
        })
    }
}
